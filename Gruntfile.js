// jshint node:true

module.exports = function(grunt)
{
    require('time-grunt')(grunt);
    require('load-grunt-tasks')(grunt);

    grunt.initConfig(
    {
    // Getting package.json info
        pkg: grunt.file.readJSON("package.json"),

    // Cleaning the dist directory, and the one from the demo
        clean:
        {
            dist: ['dist/*'],
            demo: ['demo/dist/*'],
        },

    // Compiling SCSS to CSS
        compass:
        {
            dist:
            {
                options:
                {
                    sassDir: 'src',
                    cssDir: 'dist',
                    noLineComments: true    // Disable the comment traces generated by compass
                }
            }
        },

    // Autoprefixing the transforms and transform-styles properties
    // There is no "all" parameter, and all prefixes are needed, so used a BIG value
        postcss:
        {
            options:
            {
                processors:
                [
                    require('autoprefixer')({browsers: 'last 9999 versions'})
                ]
            },
            dist:
            {
                src: 'dist/absalign.css'
            },
            demo:
            {
                files:
                {
                    'demo/dist/demo.min.css': 'demo/src/demo.css'
                }
            }
        },

    // Cleaning, with CSSComb, the generated CSS file
        csscomb:
        {
            dist:
            {
                files:
                {
                    'dist/absalign.css': ['dist/absalign.css'],
                }
            }
        },

    // Adding some package info, like version or author, to header comments and demo
        replace:
        {
            dist:
            {
                options:
                {
                    variables:
                    {
                    // Replaces "@@key" with "value"
                        'name': "<%= pkg.name %>",
                        'version': "<%= pkg.version %>",
                        'author': "<%= pkg.author %>",
                        'homepage': "<%= pkg.homepage %>"
                    }
                },
                files:
                {
                    'dist/absalign.css': ['dist/absalign.css'],
                    'dist/absalign.js': ['src/absalign.js']
                }
            },
            demo:
            {
                options:
                {
                    variables:
                    {
                    // Replaces "@@key" with "value"
                        'version': "<%= pkg.version %>",
                    }
                },
                files:
                {
                    'demo/dist/demo.min.html': 'demo/dist/demo.min.html'
                }
            }
        },

    // Minifying CSS files
        cssmin:
        {
            dist:
            {
                files:
                [{
                    expand: true,
                    cwd: 'dist/',
                    src: ['*.css'],
                    dest: 'dist/',
                    ext: '.min.css'
                }]
            },
            demo:
            {
                files:
                [{
                    expand: true,
                    cwd: 'demo/dist/',
                    src: ['*.css'],
                    dest: 'demo/dist/'
                }]
            }
        },

    // Minifying JS file
        uglify:
        {
            options:
            {
            // Preserve the header comments (which begins by /**!)
                preserveComments: 'some'
            },
            dist:
            {
                files:
                {
                    'dist/absalign.min.js': 'dist/absalign.js'
                }
            },
            demo:
            {
                files:
                {
                    'demo/dist/demo.min.js': 'demo/src/demo.js'
                }
            }
        },

        copy:
        {
            demo:
            {
                files:
                [
                    {
                        src: 'demo/src/jquery-1.12.4.min.js',
                        dest: 'demo/dist/vendor.js'
                    },
                ],
            },
        },

    // Replacing scripts and links tags with min src
        processhtml:
        {
            demo:
            {
                files:
                {
                    'demo/dist/demo.min.html': 'demo/src/demo.html'
                }
            }
        },

    // Minifying HTML files
        htmlmin:
        {
            demo:
            {
                options:
                {
                    removeComments: true,
                    collapseWhitespace: true
                },
                files:
                {
                    'demo/dist/demo.min.html': 'demo/dist/demo.min.html',
                }
            }
        },

    // Executing both minification operations at the same time
        concurrent:
        {
            minAll: ['cssmin', 'uglify', 'htmlmin'],
            minPackage: ['cssmin:dist', 'uglify:dist'],
            minDemo: ['cssmin:demo', 'uglify:demo', 'htmlmin:demo']
        }
    });

    grunt.registerTask('buildAll', ['clean', 'compass', 'postcss', 'csscomb', 'copy:demo', 'processhtml', 'replace', 'concurrent:minAll']);
    grunt.registerTask('buildPackage', ['clean:dist', 'compass:dist', 'postcss:dist', 'csscomb:dist', 'replace:dist', 'concurrent:minPackage']);
    grunt.registerTask('buildDemo', ['clean:demo', 'copy:demo', 'postcss:demo', 'processhtml:demo', 'replace:demo', 'concurrent:minDemo']);
};
